spring:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    show-sql: true
    hibernate:
      ddl-auto: validate
  datasource:
    # H2 file-based database with PostgreSQL compatibility mode
    # MODE=PostgreSQL: enables PostgreSQL-compatible syntax
    # DATABASE_TO_LOWER=TRUE: converts unquoted identifiers to lowercase (PostgreSQL behavior)
    # DEFAULT_NULL_ORDERING=HIGH: NULL values sort last (PostgreSQL default)
    url: jdbc:h2:mem:./data/devdb;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH
    driverClassName: org.h2.Driver
    username: sa
    password: password
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: false
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  security:
    oauth2:
      resourceserver:
        jwt:
          # Development Keycloak instance (optional, can be overridden)
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/stammdatenverwaltung}
          # Validate audience claim for API access
          audiences:
            - ${KEYCLOAK_API_AUDIENCE:stammdatenverwaltung-api}

server:
  port: 8080

management:
  endpoint:
    health:
      show-details: always

logging:
  level:
    '[com.ase.stammdatenverwaltung]': DEBUG
    '[org.springframework.security]': DEBUG

# Application-specific JWT configuration
app:
  security:
    jwt:
      # Validate audience claim for API access
      audience: ${KEYCLOAK_API_AUDIENCE:stammdatenverwaltung-api}
      # Client ID for extracting client-specific roles
      client-id: ${KEYCLOAK_CLIENT_ID:stammdatenverwaltung-api}
      # Extract roles from realm access (global roles)
      extract-realm-roles: true
      # Extract roles from resource access (client-specific roles)
      extract-client-roles: true
